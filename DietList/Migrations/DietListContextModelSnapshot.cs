// <auto-generated />
using System;
using DietList.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DietList.Migrations
{
  [DbContext(typeof(DietListContext))]
  partial class DietListContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Relational:MaxIdentifierLength", 64)
          .HasAnnotation("ProductVersion", "5.0.0");

      modelBuilder.Entity("DietList.Models.ApplicationUser", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("int");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Email")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("datetime(6)");

            b.Property<string>("NormalizedEmail")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("NormalizedUserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("PasswordHash")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("UserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasDatabaseName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasDatabaseName("UserNameIndex");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("DietList.Models.Diet", b =>
          {
            b.Property<int>("DietId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(20)
                      .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

            b.Property<string>("Restriction")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.HasKey("DietId");

            b.ToTable("Diets");

            b.HasData(
                      new
                  {
                    DietId = 1,
                    Name = "Regular"
                  },
                      new
                  {
                    DietId = 2,
                    Name = "Paleo"
                  },
                      new
                  {
                    DietId = 3,
                    Name = "Vegan"
                  },
                      new
                  {
                    DietId = 4,
                    Name = "Low-Carb"
                  },
                      new
                  {
                    DietId = 5,
                    Name = "Dukan"
                  },
                      new
                  {
                    DietId = 6,
                    Name = "Atkins"
                  },
                      new
                  {
                    DietId = 7,
                    Name = "Intermittent-Fasting"
                  });
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("NormalizedName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasDatabaseName("RoleNameIndex");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderKey")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Value")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("DietList.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("DietList.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("DietList.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("DietList.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
